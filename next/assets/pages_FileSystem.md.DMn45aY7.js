import{V as a}from"./chunks/theme.BtVkO-Dv.js";import{c as i,o as s,j as r,ag as o,a as t,G as l}from"./chunks/framework.BtnfViKx.js";const n={style:{margin:"1rem 0"}},f=JSON.parse('{"title":"UI5 FS","description":"","frontmatter":{},"headers":[],"relativePath":"pages/FileSystem.md","filePath":"pages/FileSystem.md"}'),c={name:"pages/FileSystem.md"},m=Object.assign(c,{setup(h){return(d,e)=>(s(),i("div",null,[e[0]||(e[0]=r("h1",{id:"ui5-fs",tabindex:"-1"},[t("UI5 FS "),r("a",{class:"header-anchor",href:"#ui5-fs","aria-label":'Permalink to "UI5 FS"'},"â€‹")],-1)),e[1]||(e[1]=r("p",null,[t("The "),r("a",{href:"https://github.com/SAP/ui5-fs",target:"_blank",rel:"noreferrer"},"UI5 FS"),t(" provides a UI5-specific file system abstraction.")],-1)),r("div",n,[l(a,{class:"no-decoration",text:"ðŸ“š API Reference",href:"https://ui5.github.io/cli/v5/api/"})]),e[2]||(e[2]=o('<h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">â€‹</a></h2><p>The virtual file system &quot;UI5 FS&quot; offers an abstraction layer from the physical file system. Among other features, it can combine a set of scattered file locations into a well-defined virtual structure.</p><h3 id="resource" tabindex="-1">Resource <a class="header-anchor" href="#resource" aria-label="Permalink to &quot;Resource&quot;">â€‹</a></h3><p>A <a href="https://ui5.github.io/cli/v5/api/@ui5_fs_Resource.html" target="_blank" rel="noreferrer">Resource</a> basically represents a file. Besides providing access to the file content, it also carries metadata like the <strong>virtual path</strong> of the Resource.</p><p>Resources are typically created and stored in <a href="#adapters">Adapters</a>. Once read from a physical file system, they are typically kept in memory for further processing in other modules.</p><p>This ensures a high build performance, as physical read and write access for a high number of resources is kept to a minimum.</p><h3 id="adapters" tabindex="-1">Adapters <a class="header-anchor" href="#adapters" aria-label="Permalink to &quot;Adapters&quot;">â€‹</a></h3><p>Adapters abstract access to different resource locations.</p><p>The <a href="https://ui5.github.io/cli/v5/api/@ui5_fs_adapters_Memory.html" target="_blank" rel="noreferrer">Memory Adapter</a> represents a virtual file system which maintains respective <a href="#resource">Resources</a> inside a virtual data structure.</p><p>The <a href="https://ui5.github.io/cli/v5/api/@ui5_fs_adapters_FileSystem.html" target="_blank" rel="noreferrer">File System Adapter</a>, on the other hand, has direct access to the physical file system. It maps a &quot;virtual base path&quot; to a given physical path.</p><p>Both adapters provide APIs to retrieve and persist <a href="#resource">Resources</a>, namely</p><ul><li>to retrieve a single resource by its virtual path use <code>byPath()</code>,</li><li>to retrieve many resources based on patterns use <code>byGlob()</code>,</li><li>to persist a single resource use <code>write()</code>.</li></ul><h3 id="reader-collections" tabindex="-1">Reader Collections <a class="header-anchor" href="#reader-collections" aria-label="Permalink to &quot;Reader Collections&quot;">â€‹</a></h3><p>Reader collections allow grouped access to multiple adapters, which might even be nested in other reader collections.</p><p>They implement the same API for <strong>retrieving</strong> resources as adapters (<code>byPath</code> and <code>byGlob</code>). Multiple flavors exist:</p><ul><li><a href="https://ui5.github.io/cli/v5/api/@ui5_fs_ReaderCollection.html" target="_blank" rel="noreferrer">ReaderCollection</a>: The most basic collection. Allows parallel read access to multiple readers (i.e. adapters or collections)</li><li><a href="https://ui5.github.io/cli/v5/api/@ui5_fs_ReaderCollectionPrioritized.html" target="_blank" rel="noreferrer">ReaderCollectionPrioritized</a>: Contains a list of readers which are searched in-order. This allows one reader to &quot;overlay&quot; resources of another</li><li><a href="https://ui5.github.io/cli/v5/api/@ui5_fs_DuplexCollection.html" target="_blank" rel="noreferrer">DuplexCollection</a>: Contains a single reader and a single &quot;writer&quot;. It therefore also implements the Adapter API for <strong>persisting</strong> resources (<code>write()</code>). When retrieving resources, the writer is prioritized over the reader</li><li><a href="https://ui5.github.io/cli/v5/api/@ui5_fs_WriterCollection.html" target="_blank" rel="noreferrer">WriterCollection</a>: Contains a set of writers and a mapping for each of them. When writing a resource, the writer is chosen based on the resource&#39;s virtual path.</li></ul>',16))]))}});export{f as __pageData,m as default};
