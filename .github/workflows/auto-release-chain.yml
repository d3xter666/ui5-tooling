name: auto-release-chain

on:
  workflow_run:
    workflows: ["release-please"]
    types: [completed]
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  continue-chain:
    runs-on: ubuntu-24.04
    if: github.event.workflow_run.conclusion == 'success'
    
    # Job-level outputs for reuse across steps
    outputs:
      all_packages: ${{ steps.setup.outputs.all_packages }}
      released_package: ${{ steps.detect-release.outputs.released_package }}
      has_release: ${{ steps.detect-release.outputs.has_release }}
      next_package: ${{ steps.find-next.outputs.next_package }}
      has_next: ${{ steps.find-next.outputs.has_next }}
      has_changes: ${{ steps.update-deps.outputs.has_changes }}
    
    # Environment variables for reuse
    env:
      GH_TOKEN: ${{ secrets.RELEASE_PLEASE_TOKEN }}
      NODE_VERSION: 24.x
      REGISTRY_URL: https://registry.npmjs.org/
      GIT_USER_NAME: "github-actions[bot]"
      GIT_USER_EMAIL: "github-actions[bot]@users.noreply.github.com"
      
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Setup git and packages array
        id: setup
        run: |
          git config user.name "${{ env.GIT_USER_NAME }}"
          git config user.email "${{ env.GIT_USER_EMAIL }}"
          
          # Define packages array for reuse
          ALL_PACKAGES="logger fs builder server project cli"
          echo "all_packages=$ALL_PACKAGES" >> $GITHUB_OUTPUT
          echo "📦 Package chain: $ALL_PACKAGES"

      - name: Detect released package
        id: detect-release
        run: |
          # Find what was previously released
          if git log -1 --pretty=format:"%s" | grep -q "^release: @ui5/"; then
            RELEASED_PKG=$(git log -1 --pretty=format:"%s" | sed -n 's/^release: @ui5\/ \([a-z-]*\) v.*/\1/p')
            echo "📦 Detected release: $RELEASED_PKG"
            echo "released_package=$RELEASED_PKG" >> $GITHUB_OUTPUT
            echo "has_release=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No release detected"
            echo "has_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Find next package in chain
        id: find-next
        if: steps.detect-release.outputs.has_release == 'true'
        run: |
          ALL_PACKAGES_ARRAY=(${{ steps.setup.outputs.all_packages }})
          RELEASED_PKG="${{ steps.detect-release.outputs.released_package }}"
          
          echo "🔍 Finding next package after: $RELEASED_PKG"
          
          # Find next package in chain order
          NEXT_PKG=""
          for i in "${!ALL_PACKAGES_ARRAY[@]}"; do
            if [[ "${ALL_PACKAGES_ARRAY[$i]}" == "$RELEASED_PKG" ]] && [[ $((i+1)) -lt ${#ALL_PACKAGES_ARRAY[@]} ]]; then
              NEXT_PKG="${ALL_PACKAGES_ARRAY[$((i+1))]}"
              break
            fi
          done
          
          # Check if next package has open release PR
          if [[ -n "$NEXT_PKG" ]]; then
            echo "🔍 Checking if $NEXT_PKG has open release PR..."
            if gh pr list --state open --json title | jq -r ".[] | select(.title | contains(\"release: @ui5/ $NEXT_PKG\")) | .title" | head -1; then
              echo "🎯 Found next package with open PR: $NEXT_PKG"
              echo "next_package=$NEXT_PKG" >> $GITHUB_OUTPUT
              echo "has_next=true" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "⏭️ No open release PR for $NEXT_PKG"
            fi
          fi
          
          # Fallback to CLI (regardless of whether CLI has open PR)
          if [[ "$RELEASED_PKG" != "cli" ]]; then
            echo "🎯 Falling back to CLI"
            echo "next_package=cli" >> $GITHUB_OUTPUT
            echo "has_next=true" >> $GITHUB_OUTPUT
          else
            echo "🎉 Chain complete - CLI was already released"
            echo "has_next=false" >> $GITHUB_OUTPUT
          fi

      - name: Update dependencies in next package
        id: update-deps
        if: steps.find-next.outputs.has_next == 'true'
        run: |
          NEXT_PKG="${{ steps.find-next.outputs.next_package }}"
          
          # Install npm-check-updates
          npm install -g npm-check-updates
          
          echo "🔄 Processing package: $NEXT_PKG"
          cd "packages/$NEXT_PKG"
          
          echo "📦 Updating @ui5/* dependencies to latest NPM versions..."
          ncu -u --filter "@ui5/*" --target latest
          
          # Check if there were actual changes
          if git diff --quiet package.json; then
            echo "ℹ️ No dependency updates needed for $NEXT_PKG"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Dependencies updated for $NEXT_PKG"
            npm install
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit dependency updates
        if: steps.update-deps.outputs.has_changes == 'true'
        run: |
          NEXT_PKG="${{ steps.find-next.outputs.next_package }}"
          
          git add "packages/$NEXT_PKG/"
          git commit -m "deps($NEXT_PKG): update @ui5 dependencies to latest versions"
          git push origin main
          
          echo "✅ Committed dependency updates for $NEXT_PKG"

      - name: Trigger release-please for updated package
        if: steps.update-deps.outputs.has_changes == 'true'
        uses: googleapis/release-please-action@v4
        id: trigger-release
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}

      - name: Merge release PR
        if: steps.update-deps.outputs.has_changes == 'true'
        id: merge-pr
        uses: ./.github/actions/merge-release-pr
        with:
          package: ${{ steps.find-next.outputs.next_package }}
          github-token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
