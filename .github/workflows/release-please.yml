name: release-please

on:
  push:
    # Detects when a release PR is merged and publishes the package
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-24.04
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      prs_created: ${{ steps.release.outputs.prs_created }}
      package_released: ${{ steps.detect_package.outputs.is_release }}
      package_name: ${{ steps.detect_package.outputs.package_name }}
      package_version: ${{ steps.detect_package.outputs.package_version }}
      package_path: ${{ steps.detect_package.outputs.package_path }}
    steps:
      - uses: actions/checkout@v5

      - name: Node.js LTS
        uses: actions/setup-node@v5
        with:
         node-version: 24.x

      - name: Run Release Please to update PRs and create releases
        uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }} # TODO: Change token on prod

      # This step is mandatory because release-please nor its plugin
      # node-workspace does not update the manifest automatically.
      # Also adds missing release tags that node-workspace plugin doesn't create.
      - name: Update manifest and add tags to release PRs
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PLEASE_TOKEN }}
        run: |
          echo "üîß Processing release PRs: updating manifest and adding tags..."
          
          # Find all release PRs once and process them
          release_prs=$(gh pr list --state open --json number,headRefName,title | jq -r '.[] | select(.title | startswith("release: @ui5/")) | "\(.number):\(.headRefName)"')
          
          if [ -z "$release_prs" ]; then
            echo "‚ÑπÔ∏è No release PRs found"
            exit 0
          fi
          
          # Configure git identity once
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create release label once if needed
          gh label create "autorelease: pending" --description "Release PR pending merge" --color "fbca04" || true
          
          # Process each release PR
          for pr_info in $release_prs; do
            pr_number=$(echo "$pr_info" | cut -d: -f1)
            branch_name=$(echo "$pr_info" | cut -d: -f2)
            
            echo "üì¶ Processing PR #$pr_number on branch $branch_name"
            
            # Extract package name from branch
            pkg_name=$(echo "$branch_name" | sed -n 's/.*release-please--branches--main--components--\([^-]*\).*/\1/p')
            
            if [ -z "$pkg_name" ] || [ ! -f "packages/$pkg_name/package.json" ]; then
              echo "‚ö†Ô∏è Could not determine package from branch: $branch_name"
              continue
            fi
            
            # === MANIFEST UPDATE ===
            echo "  üìù Updating manifest for $pkg_name..."
            
            # Checkout branch and completely clean any conflicts
            git fetch origin "$branch_name" && git checkout "$branch_name"
            
            # Ensure we're working with latest main's manifest
            git fetch origin main
            
            # Completely reset any staged changes and force clean state
            git reset --hard HEAD
            git clean -fd
            
            # Always start with main's manifest as truth
            # This ensures we never have conflicts because we're always working from main's state
            git checkout origin/main -- .release-please-manifest.json
            
            # Make sure it's unstaged so we control exactly when it gets committed
            git reset HEAD .release-please-manifest.json 2>/dev/null || true
            
            # Update only this package's manifest entry from main's clean state
            version=$(node -p "require('./packages/$pkg_name/package.json').version")
            echo "  üìã Updating $pkg_name from main's manifest to version $version"
            
            # Create a completely fresh manifest based on main + this package update
            jq --arg p "packages/$pkg_name" --arg v "$version" '.[$p] = $v' .release-please-manifest.json > tmp.json && mv tmp.json .release-please-manifest.json
            
            # Verify the change was applied
            if grep -q "\"packages/$pkg_name\": \"$version\"" .release-please-manifest.json; then
              echo "  ‚úÖ Manifest entry verified: packages/$pkg_name = $version"
            else
              echo "  ‚ö†Ô∏è Warning: Could not verify manifest update"
            fi
            
            # Always commit and force push to prevent merge conflicts
            # Even if the file appears unchanged, we need to ensure it's based on latest main
            git add .release-please-manifest.json
            git commit -m "chore: update manifest for $pkg_name to $version [skip ci]" || git commit --amend -m "chore: update manifest for $pkg_name to $version [skip ci]"
            
            # Always force push - this prevents merge conflicts during PR merge
            # We know our manifest is correct because it's based on latest main + our single update
            echo "  üöÄ Force pushing manifest to prevent merge conflicts"
            git push origin "$branch_name" --force
            echo "  ‚úÖ Force pushed manifest for $pkg_name (conflict prevention)"
            
            # === LABEL UPDATE ===
            echo "  üè∑Ô∏è Adding release tags..."
            git checkout main  # Switch back to main before GitHub API calls
            
            # Add the autorelease label that release-please expects
            gh pr edit "$pr_number" --add-label "autorelease: pending" || echo "  ‚ö†Ô∏è Could not add autorelease label to PR #$pr_number"
            
            echo "  ‚úÖ Processed PR #$pr_number for package $pkg_name"
          done

      - name: Detect which package was released
        id: detect_package
        run: |
          echo "üîç Checking if a release PR was just merged..."
          
          # Get the commit message of the merge
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Latest commit: $COMMIT_MSG"
          
          # Check if this is a release PR merge based on the configured pattern "release: @ui5/ {component} v${version}"
          # This matches commits like "release: @ui5/ logger v1.2.3" or "release: @ui5/ fs v4.0.3" (note the space after @ui5/)
          if [[ "$COMMIT_MSG" =~ ^release:\ @ui5/\ ([a-z-]+)\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            PACKAGE_NAME="${BASH_REMATCH[1]}"
            PACKAGE_VERSION="${BASH_REMATCH[2]}"
            
            echo "üéâ Detected release for package: $PACKAGE_NAME@$PACKAGE_VERSION"
            echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
            echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
            echo "package_path=packages/$PACKAGE_NAME" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è This commit is not a release PR merge"
            echo "‚ÑπÔ∏è Expected format: 'release: @ui5/ <package> v<version>'"
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

  publish-package:
    runs-on: ubuntu-24.04
    needs: release-please
    if: needs.release-please.outputs.package_released == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: Node.js LTS
        uses: actions/setup-node@v5
        with:
         node-version: 24.x

      - name: Verify package directory exists
        run: |
          PACKAGE_PATH="${{ needs.release-please.outputs.package_path }}"
          if [ ! -d "$PACKAGE_PATH" ]; then
            echo "‚ùå Package directory $PACKAGE_PATH does not exist!"
            exit 1
          fi
          
          if [ ! -f "$PACKAGE_PATH/package.json" ]; then
            echo "‚ùå No package.json found in $PACKAGE_PATH!"
            exit 1
          fi
          
          echo "‚úÖ Package directory $PACKAGE_PATH exists and contains package.json"
      
      - name: Install dependencies
        run: |
          cd "${{ needs.release-please.outputs.package_path }}"
          echo "üì¶ Installing dependencies for ${{ needs.release-please.outputs.package_name }}@${{ needs.release-please.outputs.package_version }}"
          npm ci
      
      - name: Publish to NPM
        run: |
          cd "${{ needs.release-please.outputs.package_path }}"
          echo "üöÄ Publishing ${{ needs.release-please.outputs.package_name }}@${{ needs.release-please.outputs.package_version }} to NPM..."
          
          # TODO: Uncomment the following lines when ready to publish
          # npm publish --access public
          
          echo "‚úÖ Successfully published ${{ needs.release-please.outputs.package_name }}@${{ needs.release-please.outputs.package_version }}"
