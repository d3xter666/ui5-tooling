name: release-please

on:
  push:
    # Detects when a release PR is merged and publishes the package
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  detect-and-publish:
    runs-on: ubuntu-24.04
    outputs:
      package_released: ${{ steps.detect_package.outputs.package_name }}
      package_version: ${{ steps.detect_package.outputs.package_version }}
    steps:
      - uses: actions/checkout@v5

      - name: Node.js LTS
        uses: actions/setup-node@v5
        with:
         node-version: 24.x

      - name: Run Release Please to update PRs and create releases
        uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }} # TODO: Change token on prod

      - name: Detect which package was released
        id: detect_package
        run: |
          echo "üîç Checking if a release PR was just merged..."
          
          # Get the commit message of the merge
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Latest commit: $COMMIT_MSG"
          
          # Check if this is a release PR merge based on the configured pattern "release: @ui5/${component} v${version}"
          # This matches commits like "release: @ui5/logger v1.2.3" or "release: @ui5/cli v4.1.2"
          if [[ "$COMMIT_MSG" =~ ^release:\ @ui5/([a-z-]+)\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            PACKAGE_NAME="${BASH_REMATCH[1]}"
            PACKAGE_VERSION="${BASH_REMATCH[2]}"
            
            echo "üéâ Detected release for package: $PACKAGE_NAME@$PACKAGE_VERSION"
            echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
            echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
            echo "package_path=packages/$PACKAGE_NAME" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          # Also check for the default release-please format as fallback
          elif [[ "$COMMIT_MSG" =~ ^chore\(main\):\ release\ ([a-z-]+)\ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            PACKAGE_NAME="${BASH_REMATCH[1]}"
            PACKAGE_VERSION="${BASH_REMATCH[2]}"
            
            echo "üéâ Detected release for package (fallback pattern): $PACKAGE_NAME@$PACKAGE_VERSION"
            echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
            echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
            echo "package_path=packages/$PACKAGE_NAME" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è This commit is not a release PR merge"
            echo "‚ÑπÔ∏è Expected format: 'release: @ui5/<package> v<version>' or 'chore(main): release <package> <version>'"
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Verify package directory exists
        if: steps.detect_package.outputs.is_release == 'true'
        run: |
          PACKAGE_PATH="${{ steps.detect_package.outputs.package_path }}"
          if [ ! -d "$PACKAGE_PATH" ]; then
            echo "‚ùå Package directory $PACKAGE_PATH does not exist!"
            exit 1
          fi
          
          if [ ! -f "$PACKAGE_PATH/package.json" ]; then
            echo "‚ùå No package.json found in $PACKAGE_PATH!"
            exit 1
          fi
          
          echo "‚úÖ Package directory $PACKAGE_PATH exists and contains package.json"
      
      - name: Install dependencies
        if: steps.detect_package.outputs.is_release == 'true'
        run: |
          cd "${{ steps.detect_package.outputs.package_path }}"
          echo "üì¶ Installing dependencies for ${{ steps.detect_package.outputs.package_name }}@${{ steps.detect_package.outputs.package_version }}"
          npm ci
      
      - name: Publish to NPM
        if: steps.detect_package.outputs.is_release == 'true'
        run: |
          cd "${{ steps.detect_package.outputs.package_path }}"
          echo "üöÄ Publishing ${{ steps.detect_package.outputs.package_name }}@${{ steps.detect_package.outputs.package_version }} to NPM..."
          
          # TODO: Uncomment the following lines when ready to publish
          # npm publish --access public
          
          echo "‚úÖ Successfully published ${{ steps.detect_package.outputs.package_name }}@${{ steps.detect_package.outputs.package_version }}"

  create-release:
    runs-on: ubuntu-24.04
    needs: detect-and-publish
    if: needs.detect-and-publish.outputs.package_released != ''
    steps:
      - uses: actions/checkout@v5

      - name: Run Release Please to create tags
        uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }} # TODO: Change token on prod
