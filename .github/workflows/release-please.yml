name: release-please

on:
  push:
    # Detects when a release PR is merged and publishes the package
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-24.04
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      prs_created: ${{ steps.release.outputs.prs_created }}
    steps:
      - uses: actions/checkout@v5

      - name: Node.js LTS
        uses: actions/setup-node@v5
        with:
         node-version: 24.x

      - name: Run Release Please to update PRs and create releases
        uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }} # TODO: Change token on prod

      # - name: Update package-lock.json files after release-please
      #   if: steps.release.outputs.prs_created == 'true'
      #   run: |
      #     echo "üîÑ Updating package-lock.json files after release-please changes..."
          
      #     # Find all packages that have package.json files
      #     for package_dir in packages/*/; do
      #       if [ -f "${package_dir}package.json" ] && [ ! "${package_dir}" = "packages/documentation/" ]; then
      #         echo "üì¶ Updating package-lock.json for ${package_dir}"
      #         cd "${package_dir}"
              
      #         # Update package-lock.json to match the new version in package.json
      #         if [ -f "package-lock.json" ]; then
      #           npm install --package-lock-only
      #           echo "‚úÖ Updated package-lock.json in ${package_dir}"
      #         else
      #           echo "‚ö†Ô∏è No package-lock.json found in ${package_dir}"
      #         fi
              
      #         cd - > /dev/null
      #       fi
      #     done
          
      #     # Check if there are any changes to commit
      #     if ! git diff --quiet; then
      #       echo "üìù Committing updated package-lock.json files..."
      #       git config user.name "github-actions[bot]"
      #       git config user.email "github-actions[bot]@users.noreply.github.com"
      #       git add packages/*/package-lock.json
      #       git commit -m "chore: update package-lock.json files after release-please"
      #       git push
      #     else
      #       echo "‚ÑπÔ∏è No package-lock.json changes to commit"
      #     fi

      # This step is mandatory because release-please nor its plugin
      # node-workspace does not update the manifest automatically.
      - name: Manual .release-please-manifest.json in release PRs
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PLEASE_TOKEN }}
        run: |
          echo "üîß Updating manifest in release PR branches..."
          
          # Simple: find release PRs and update manifest
          for pr_info in $(gh pr list --state open --json number,headRefName,title | jq -r '.[] | select(.title | startswith("release: @ui5/")) | "\(.number):\(.headRefName)"'); do
            pr_number=$(echo "$pr_info" | cut -d: -f1)
            branch_name=$(echo "$pr_info" | cut -d: -f2)
            
            echo "üì¶ Updating PR #$pr_number on branch $branch_name"
            
            # Checkout branch, update manifest, push back
            git fetch origin "$branch_name" && git checkout "$branch_name"
            
            # Regenerate manifest from all current package versions
            jq -n '{}' > .release-please-manifest.json
            for pkg in packages/*/package.json; do
              if [ "$pkg" != "packages/documentation/package.json" ]; then
                path="packages/$(basename $(dirname "$pkg"))"
                version=$(node -p "require('./$pkg').version")
                jq --arg p "$path" --arg v "$version" '.[$p] = $v' .release-please-manifest.json > tmp.json && mv tmp.json .release-please-manifest.json
              fi
            done
            
            # Commit if changed
            if ! git diff --quiet .release-please-manifest.json; then
              cat .release-please-manifest.json
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git add .release-please-manifest.json
              git commit -m "chore: regenerate manifest with all current versions"
              git push origin "$branch_name"
              echo "‚úÖ Updated manifest in PR #$pr_number"
            else
              echo "‚ÑπÔ∏è Manifest already up-to-date in PR #$pr_number"
            fi
            
            git checkout main
          done

  publish-package:
    runs-on: ubuntu-24.04
    needs: release-please
    if: needs.release-please.outputs.releases_created == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: Node.js LTS
        uses: actions/setup-node@v5
        with:
         node-version: 24.x

      - name: Detect which package was released
        id: detect_package
        run: |
          echo "üîç Checking if a release PR was just merged..."
          
          # Get the commit message of the merge
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Latest commit: $COMMIT_MSG"
          
          # Check if this is a release PR merge based on the configured pattern "release: @ui5/ {component} v${version}"
          # This matches commits like "release: @ui5/ logger v1.2.3" or "release: @ui5/ fs v4.0.3" (note the space after @ui5/)
          if [[ "$COMMIT_MSG" =~ ^release:\ @ui5/\ ([a-z-]+)\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            PACKAGE_NAME="${BASH_REMATCH[1]}"
            PACKAGE_VERSION="${BASH_REMATCH[2]}"
            
            echo "üéâ Detected release for package: $PACKAGE_NAME@$PACKAGE_VERSION"
            echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
            echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
            echo "package_path=packages/$PACKAGE_NAME" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è This commit is not a release PR merge"
            echo "‚ÑπÔ∏è Expected format: 'release: @ui5/ <package> v<version>'"
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Verify package directory exists
        if: steps.detect_package.outputs.is_release == 'true'
        run: |
          PACKAGE_PATH="${{ steps.detect_package.outputs.package_path }}"
          if [ ! -d "$PACKAGE_PATH" ]; then
            echo "‚ùå Package directory $PACKAGE_PATH does not exist!"
            exit 1
          fi
          
          if [ ! -f "$PACKAGE_PATH/package.json" ]; then
            echo "‚ùå No package.json found in $PACKAGE_PATH!"
            exit 1
          fi
          
          echo "‚úÖ Package directory $PACKAGE_PATH exists and contains package.json"
      
      - name: Install dependencies
        if: steps.detect_package.outputs.is_release == 'true'
        run: |
          cd "${{ steps.detect_package.outputs.package_path }}"
          echo "üì¶ Installing dependencies for ${{ steps.detect_package.outputs.package_name }}@${{ steps.detect_package.outputs.package_version }}"
          npm ci
      
      - name: Publish to NPM
        if: steps.detect_package.outputs.is_release == 'true'
        run: |
          cd "${{ steps.detect_package.outputs.package_path }}"
          echo "üöÄ Publishing ${{ steps.detect_package.outputs.package_name }}@${{ steps.detect_package.outputs.package_version }} to NPM..."
          
          # TODO: Uncomment the following lines when ready to publish
          # npm publish --access public
          
          echo "‚úÖ Successfully published ${{ steps.detect_package.outputs.package_name }}@${{ steps.detect_package.outputs.package_version }}"
