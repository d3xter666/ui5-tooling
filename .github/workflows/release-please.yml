name: release-please

on:
  push:
    # Detects when a release PR is merged and publishes the package
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-24.04
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      prs_created: ${{ steps.release.outputs.prs_created }}
      package_released: ${{ steps.detect_package.outputs.is_release }}
      package_name: ${{ steps.detect_package.outputs.package_name }}
      package_version: ${{ steps.detect_package.outputs.package_version }}
      package_path: ${{ steps.detect_package.outputs.package_path }}
    steps:
      - uses: actions/checkout@v5

      - name: Node.js LTS
        uses: actions/setup-node@v5
        with:
         node-version: 24.x

      - name: Run Release Please to update PRs and create releases
        uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }} # TODO: Change token on prod

      # This step is mandatory because release-please nor its plugin
      # node-workspace does not update the manifest automatically.
      - name: Manual .release-please-manifest.json in release PRs
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PLEASE_TOKEN }}
        run: |
          echo "üîß Updating manifest in release PR branches..."
          
          # Simple: find release PRs and update manifest
          for pr_info in $(gh pr list --state open --json number,headRefName,title | jq -r '.[] | select(.title | startswith("release: @ui5/")) | "\(.number):\(.headRefName)"'); do
            pr_number=$(echo "$pr_info" | cut -d: -f1)
            branch_name=$(echo "$pr_info" | cut -d: -f2)
            
            echo "üì¶ Updating PR #$pr_number on branch $branch_name"
            
            # Configure git identity
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            # Checkout branch and completely clean any conflicts
            git fetch origin "$branch_name" && git checkout "$branch_name"
            
            # Nuclear approach: completely reset any staged changes and force clean state
            git reset --hard HEAD
            git clean -fd
            
            # Forcefully overwrite manifest with main's version - no conflicts possible
            git checkout origin/main -- .release-please-manifest.json
            git reset HEAD .release-please-manifest.json  # Unstage if accidentally staged
            
            # Find the package for this specific PR and update only its manifest entry
            pkg_name=$(echo "$branch_name" | sed -n 's/.*release-please--branches--main--components--\([^-]*\).*/\1/p')
            if [ -n "$pkg_name" ] && [ -f "packages/$pkg_name/package.json" ]; then
              version=$(node -p "require('./packages/$pkg_name/package.json').version")
              jq --arg p "packages/$pkg_name" --arg v "$version" '.[$p] = $v' .release-please-manifest.json > tmp.json && mv tmp.json .release-please-manifest.json
              echo "‚úÖ Updated manifest for $pkg_name to $version"
            else
              echo "‚ö†Ô∏è Could not determine package from branch name: $branch_name"
            fi
            
            # Commit and force push - no conflicts possible with this approach
            if ! git diff --quiet .release-please-manifest.json; then
              git add .release-please-manifest.json
              git commit -m "chore: update manifest for $pkg_name"
              git push origin "$branch_name" --force  # Force push to overwrite any conflicts
              echo "‚úÖ Updated manifest in PR #$pr_number"
            else
              echo "‚ÑπÔ∏è Manifest already up-to-date in PR #$pr_number"
            fi
            
            git checkout main
          done

      # Add missing release tags that node-workspace plugin doesn't create
      - name: Add release tags to PRs created by node-workspace
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PLEASE_TOKEN }}
        run: |
          echo "üè∑Ô∏è Adding release tags to PRs..."
          
          # Find release PRs and add the necessary tags
          for pr_info in $(gh pr list --state open --json number,headRefName,title | jq -r '.[] | select(.title | startswith("release: @ui5/")) | "\(.number):\(.headRefName):\(.title)"'); do
            pr_number=$(echo "$pr_info" | cut -d: -f1)
            branch_name=$(echo "$pr_info" | cut -d: -f2)
            pr_title=$(echo "$pr_info" | cut -d: -f3-)
            
            echo "üè∑Ô∏è Adding tags to PR #$pr_number: $pr_title"
            
            # Extract package name from branch
            pkg_name=$(echo "$branch_name" | sed -n 's/.*release-please--branches--main--components--\([^-]*\).*/\1/p')
            
            if [ -n "$pkg_name" ] && [ -f "packages/$pkg_name/package.json" ]; then
              # Add the autorelease: pending tag that release-please expects
              gh pr edit "$pr_number" --add-label "autorelease: pending"
              
              # Add the release-please label to mark it as a release PR
              gh pr edit "$pr_number" --add-label "release-please"
              
              # Add type: release label
              gh pr edit "$pr_number" --add-label "type: release"
              
              echo "‚úÖ Added release tags to PR #$pr_number for package $pkg_name"
            else
              echo "‚ö†Ô∏è Could not determine package from branch: $branch_name"
            fi
          done

      - name: Detect which package was released
        id: detect_package
        run: |
          echo "üîç Checking if a release PR was just merged..."
          
          # Get the commit message of the merge
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Latest commit: $COMMIT_MSG"
          
          # Check if this is a release PR merge based on the configured pattern "release: @ui5/ {component} v${version}"
          # This matches commits like "release: @ui5/ logger v1.2.3" or "release: @ui5/ fs v4.0.3" (note the space after @ui5/)
          if [[ "$COMMIT_MSG" =~ ^release:\ @ui5/\ ([a-z-]+)\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            PACKAGE_NAME="${BASH_REMATCH[1]}"
            PACKAGE_VERSION="${BASH_REMATCH[2]}"
            
            echo "üéâ Detected release for package: $PACKAGE_NAME@$PACKAGE_VERSION"
            echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
            echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
            echo "package_path=packages/$PACKAGE_NAME" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è This commit is not a release PR merge"
            echo "‚ÑπÔ∏è Expected format: 'release: @ui5/ <package> v<version>'"
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

  publish-package:
    runs-on: ubuntu-24.04
    needs: release-please
    if: needs.release-please.outputs.package_released == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: Node.js LTS
        uses: actions/setup-node@v5
        with:
         node-version: 24.x

      - name: Verify package directory exists
        run: |
          PACKAGE_PATH="${{ needs.release-please.outputs.package_path }}"
          if [ ! -d "$PACKAGE_PATH" ]; then
            echo "‚ùå Package directory $PACKAGE_PATH does not exist!"
            exit 1
          fi
          
          if [ ! -f "$PACKAGE_PATH/package.json" ]; then
            echo "‚ùå No package.json found in $PACKAGE_PATH!"
            exit 1
          fi
          
          echo "‚úÖ Package directory $PACKAGE_PATH exists and contains package.json"
      
      - name: Install dependencies
        run: |
          cd "${{ needs.release-please.outputs.package_path }}"
          echo "üì¶ Installing dependencies for ${{ needs.release-please.outputs.package_name }}@${{ needs.release-please.outputs.package_version }}"
          npm ci
      
      - name: Publish to NPM
        run: |
          cd "${{ needs.release-please.outputs.package_path }}"
          echo "üöÄ Publishing ${{ needs.release-please.outputs.package_name }}@${{ needs.release-please.outputs.package_version }} to NPM..."
          
          # TODO: Uncomment the following lines when ready to publish
          # npm publish --access public
          
          echo "‚úÖ Successfully published ${{ needs.release-please.outputs.package_name }}@${{ needs.release-please.outputs.package_version }}"
