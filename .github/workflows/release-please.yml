name: release-please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-24.04
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      prs_created: ${{ steps.release.outputs.prs_created }}
      package_released: ${{ steps.detect_package.outputs.is_release }}
      package_name: ${{ steps.detect_package.outputs.package_name }}
      package_version: ${{ steps.detect_package.outputs.package_version }}
      package_path: ${{ steps.detect_package.outputs.package_path }}
    steps:
      - uses: actions/checkout@v5

      - name: Node.js LTS
        uses: actions/setup-node@v5
        with:
         node-version: 24.x

      - name: Run Release Please to update PRs and create releases
        uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}

      - name: Update manifest in all release PRs
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PLEASE_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create label if needed
          gh label create "autorelease: pending" --description "Release PR pending merge" --color "fbca04" || true

          # Process each open release PR
          for pr_info in $(gh pr list --state open --json number,headRefName,title | jq -r '.[] | select(.title | startswith("release: @ui5/")) | "\(.number):\(.headRefName)"'); do
            pr_number=$(echo "$pr_info" | cut -d: -f1)
            branch_name=$(echo "$pr_info" | cut -d: -f2)
            pkg_name=$(echo "$branch_name" | sed -n 's/.*release-please--branches--main--components--\([^-]*\).*/\1/p')
            
            if [ -z "$pkg_name" ]; then
              continue
            fi

            echo "ðŸ“¦ Syncing PR #$pr_number ($pkg_name)"
            
            git fetch origin main "$branch_name"
            git checkout "$branch_name"
            
            # Find the release commit
            RELEASE_COMMIT=$(git log --oneline -n 10 | grep "release: @ui5/ $pkg_name" | head -1 | cut -d' ' -f1)
            
            if [ -z "$RELEASE_COMMIT" ]; then
              continue
            fi
            
            current_version=$(node -p "require('./packages/$pkg_name/package.json').version")
            
            # Reset to main and cherry-pick the release commit
            git reset --hard origin/main
            git cherry-pick "$RELEASE_COMMIT" || {
              # Resolve conflicts by taking main's manifest and updating this package
              git checkout origin/main -- .release-please-manifest.json
              jq --arg p "packages/$pkg_name" --arg v "$current_version" '.[$p] = $v' .release-please-manifest.json > tmp.json && mv tmp.json .release-please-manifest.json
              git add .release-please-manifest.json
              git cherry-pick --continue
            }
            
            git push origin "$branch_name" --force
            
            # Add release-please label for automation
            gh pr edit "$pr_number" --add-label "autorelease: pending" || true
            
            git checkout main
          done

      - name: Detect which package was released
        id: detect_package
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          if [[ "$COMMIT_MSG" =~ ^release:\ @ui5/\ ([a-z-]+)\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            echo "package_name=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "package_version=${BASH_REMATCH[2]}" >> $GITHUB_OUTPUT
            echo "package_path=packages/${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

  publish-package:
    runs-on: ubuntu-24.04
    needs: release-please
    if: needs.release-please.outputs.package_released == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: Node.js LTS
        uses: actions/setup-node@v5
        with:
         node-version: 24.x

      - name: Install and publish package
        run: |
          cd "${{ needs.release-please.outputs.package_path }}"
          echo "ðŸš€ Publishing ${{ needs.release-please.outputs.package_name }}@${{ needs.release-please.outputs.package_version }}"
          
          # TODO: Uncomment when ready to publish
          # npm ci
          # npm publish --access public
