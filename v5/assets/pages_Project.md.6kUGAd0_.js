import{V as t}from"./chunks/theme.po792KpC.js";import{c as o,o as r,ag as a,j as i,G as d}from"./chunks/framework.cjjkEB4_.js";const c={style:{margin:"1rem 0"}},h=JSON.parse('{"title":"UI5 Project","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Project.md","filePath":"pages/Project.md"}'),s={name:"pages/Project.md"},m=Object.assign(s,{setup(n){return(l,e)=>(r(),o("div",null,[e[0]||(e[0]=a('<h1 id="ui5-project" tabindex="-1">UI5 Project <a class="header-anchor" href="#ui5-project" aria-label="Permalink to &quot;UI5 Project&quot;">â€‹</a></h1><p>The <a href="https://github.com/SAP/ui5-project" target="_blank" rel="noreferrer">UI5 Project</a> module provides functionality to build a UI5 project. Also see <a href="./Overview#project-dependencies">Development Overview: Project Dependencies</a>.</p><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">â€‹</a></h2><p>Types define how a project can be configured and how it is built. A type orchestrates a set of tasks and defines the order in which they get applied during build phase. Furthermore, it takes care of formatting and validating the project-specific configuration.</p><p>Also see <a href="./Configuration#general-configuration">UI5 Project: Configuration</a></p><h3 id="application" tabindex="-1">application <a class="header-anchor" href="#application" aria-label="Permalink to &quot;application&quot;">â€‹</a></h3><p>Projects of type <code>application</code> are typically the main or root project. In a projects dependency tree, there should only be one project of type <code>application</code>. If multiple are found, those further away from the root are ignored.</p><p>The source directory of an application (typically named <code>webapp</code>) is mapped to the virtual root path <code>/</code>.</p><p>An applications source directory may or may not contain a <code>Component.js</code> file. If it does, it must also contain a <code>manifest.json</code> file. If there is a <code>Component.js</code> file, an optimized <code>Component-preload.js</code> file will be generated during the build.</p><h3 id="library" tabindex="-1">library <a class="header-anchor" href="#library" aria-label="Permalink to &quot;library&quot;">â€‹</a></h3><p>UI5 libraries are often referred to as reuse-, custom- or <a href="https://github.com/SAP/openui5/blob/-/docs/controllibraries.md" target="_blank" rel="noreferrer">control libraries</a>. They are a key component in sharing code across multiple projects in UI5.</p><p>A project of type <code>library</code> must have a source directory (typically named <code>src</code>). It may also feature a &quot;test&quot; directory. These directories are mapped to the virtual directories <code>/resources</code> for the sources and <code>/test-resources</code> for the test resources.</p><p>These directories should contain a directory structure representing the namespace of the library (e.g. <code>src/my/first/library</code>) to prevent name clashes between the resources of different libraries.</p><h3 id="theme-library" tabindex="-1">theme-library <a class="header-anchor" href="#theme-library" aria-label="Permalink to &quot;theme-library&quot;">â€‹</a></h3><p><em>Available since <a href="./Configuration#specification-versions">Specification Version</a> 1.1</em></p><p>UI5 theme libraries provide theming resources for the controls of one or multiple libraries.</p><p>A project of type <code>theme-library</code> must have a source directory (typically named <code>src</code>). It may also feature a &quot;test&quot; directory. These directories are mapped to the virtual directories <code>/resources</code> for the sources and <code>/test-resources</code> for the test resources.</p><p>The source directory must contain a directory structure representing the namespaces of the libraries it provides theme resources for. For example, a theme library named <code>my_custom_theme</code>, providing resources for a library named <code>my.library</code> should have these resources in a directory path <code>my/library/themes/my_custom_theme/</code>.</p><h3 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;module&quot;">â€‹</a></h3><p>The <code>module</code> type is meant for usage with non-UI5 resources like third-party libraries. Their path mapping can be configured freely. During a build, their resources are copied without modifications.</p><h2 id="build-output-style" tabindex="-1">Build Output Style <a class="header-anchor" href="#build-output-style" aria-label="Permalink to &quot;Build Output Style&quot;">â€‹</a></h2><p>The <em>Output Style</em> offers you control over your project&#39;s build output folder. Namespaces like <code>sap.m</code> or <code>sap.ui.core</code> can be streamlined, producing a more concise and flat output. For example, a resource like <code>/resources/sap/m/RangeSlider.js</code> will be transformed into <code>./RangeSlider.js</code>. And vice versa, applications that are built by default with <code>Flat</code> output, can leverage any namespaces they might have.</p><p>In the table below you can find the available combinations of project type &amp; output style.</p><table tabindex="0"><thead><tr><th>Project Type / Requested Output Style</th><th>Resulting Style</th></tr></thead><tbody><tr><td><strong>application</strong></td><td></td></tr><tr><td><code>Default</code></td><td>Root project is written <code>Flat</code>-style. ^1^</td></tr><tr><td><code>Flat</code></td><td>Same as <code>Default</code>.</td></tr><tr><td><code>Namespace</code></td><td>Root project is written <code>Namespace</code>-style (resources are prefixed with the project&#39;s namespace). ^1^</td></tr><tr><td><strong>library</strong></td><td></td></tr><tr><td><code>Default</code></td><td>Root project is written <code>Namespace</code>-style. ^1^</td></tr><tr><td><code>Flat</code></td><td>Root project is written <code>Flat</code>-style (without its namespace, logging warnings for resources outside of it). ^1^</td></tr><tr><td><code>Namespace</code></td><td>Same as <code>Default</code>.</td></tr><tr><td><strong>theme-library</strong></td><td></td></tr><tr><td><code>Default</code></td><td>Root project is written in the style of the sources (multiple namespaces). ^1^</td></tr><tr><td><code>Flat</code></td><td><strong>Unsupported</strong> ^2^</td></tr><tr><td><code>Namespace</code></td><td><strong>Unsupported</strong> ^2^</td></tr><tr><td><strong>module</strong></td><td></td></tr><tr><td><code>Default</code></td><td>Root project is written with the <a href="https://ui5.github.io/cli/v5/pages/Configuration/#available-path-mappings" target="_blank" rel="noreferrer">configured paths</a>. ^1^</td></tr><tr><td><code>Flat</code></td><td><strong>Unsupported</strong> ^3^</td></tr><tr><td><code>Namespace</code></td><td><strong>Unsupported</strong> ^3^</td></tr></tbody></table><p>^1^ The Output Style is only applied to the root project&#39;s output folder structure. Any dependencies included in the build would retain their <code>Default</code> output style.<br> ^2^ Theme libraries in most cases have more than one namespace.<br> ^3^ Modules have explicit path mappings configured and no namespace concept.</p>',25)),i("div",c,[d(t,{class:"no-decoration",text:"ðŸ“š API Reference",href:"https://ui5.github.io/cli/v5/api/@ui5_project_build_ProjectBuilder.html"})])]))}});export{h as __pageData,m as default};
